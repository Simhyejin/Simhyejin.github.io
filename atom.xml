<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>JENNY|시매</title>
  
  <subtitle>시매의 기록장</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://simhyejin.github.io/"/>
  <updated>2019-11-13T08:03:34.786Z</updated>
  <id>https://simhyejin.github.io/</id>
  
  <author>
    <name>Sim Hyejin</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>도움 받은 사이트</title>
    <link href="https://simhyejin.github.io/2019/11/13/goodSite/"/>
    <id>https://simhyejin.github.io/2019/11/13/goodSite/</id>
    <published>2019-11-13T07:53:21.000Z</published>
    <updated>2019-11-13T08:03:34.786Z</updated>
    
    <content type="html"><![CDATA[<p>요새 프로젝트를 하면서 도움을 받았던 사이트 정리</p><h1 id="JAVA-Spring-Boot"><a href="#JAVA-Spring-Boot" class="headerlink" title="JAVA (Spring Boot)"></a>JAVA (Spring Boot)</h1><h2 id="Database"><a href="#Database" class="headerlink" title="Database"></a>Database</h2><p><a href="http://egloos.zum.com/kwon37xi/v/5364167" target="_blank" rel="noopener">JAVA DataBase Replication Master/Slave (write/read) 분기 처리</a><br><a href="https://pkgonan.github.io/2018/04/HikariCP-test-while-idle" target="_blank" rel="noopener">HikariCP는 test-while-idle과 같은 커넥션 갱신 기능이 없을까?</a></p><h2 id="Network"><a href="#Network" class="headerlink" title="Network"></a>Network</h2><p><a href="https://liuyehcf.github.io/2018/10/21/Netty-Demo/" target="_blank" rel="noopener">Netty-Demo</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;요새 프로젝트를 하면서 도움을 받았던 사이트 정리&lt;/p&gt;
&lt;h1 id=&quot;JAVA-Spring-Boot&quot;&gt;&lt;a href=&quot;#JAVA-Spring-Boot&quot; class=&quot;headerlink&quot; title=&quot;JAVA (Spring Boot)&quot;&gt;&lt;/a&gt;J
      
    
    </summary>
    
      <category term="CSE" scheme="https://simhyejin.github.io/categories/CSE/"/>
    
      <category term="ETC" scheme="https://simhyejin.github.io/categories/CSE/ETC/"/>
    
    
      <category term="JAVA" scheme="https://simhyejin.github.io/tags/JAVA/"/>
    
  </entry>
  
  <entry>
    <title>[자바성능튜닝이야기] 04 어디에  담아야 하는지...</title>
    <link href="https://simhyejin.github.io/2019/11/05/javaPerfomanceTunning4/"/>
    <id>https://simhyejin.github.io/2019/11/05/javaPerfomanceTunning4/</id>
    <published>2019-11-05T02:14:41.000Z</published>
    <updated>2019-11-13T09:26:40.363Z</updated>
    
    <content type="html"><![CDATA[<p>이 글은 아직 작성 중이며 완성 되지 않은 상태입니다.<br>자바 성능 튜닝 이야기(04 어디에  담아야 하는지…)을 읽고 공부하여 정리한 내용입니다. </p><hr><div id="index">목차</div><ul><li><a href="#interface">Collection 및 Map 인터페이스의 이해</a><ul><li><a href="#collection-interface">Collection 인터페이스</a></li><li><a href="#map-interface">Map 인터페이스</a></li></ul></li><li><a href="#set">Set 관련 클래스</a></li><li><a href="#list">List 관련 클래스</a></li><li><a href="#queue">Queue 관련 클래스</a></li><li><a href="#map">Map 관련 클래스</a></li><li><a href="#collection-sync">Collection 관련 클래스의 동기화</a></li></ul><hr><h2 id="Collection-및-Map-인터페이스의-이해"><a href="#Collection-및-Map-인터페이스의-이해" class="headerlink" title="Collection 및 Map 인터페이스의 이해"></a><div id="interface">Collection 및 Map 인터페이스의 이해</div></h2><h3 id="Collection-인터페이스"><a href="#Collection-인터페이스" class="headerlink" title="Collection 인터페이스"></a><div id="collection-interface">Collection 인터페이스</div></h3><p><img src alt="이미지 준비중"></p><ul><li><strong>Collection</strong> : 상위 인터페이스</li><li><strong>Set</strong> : 중복을 허용하지 않는 집합을 처리하기 위한 인터페이스</li><li><strong>SortedSet</strong> : 오름차순을 갖는 Set 인터페이스</li><li><strong>List</strong> : 순서가 있는 집합을 처리하기 위한 인터페이스<br>중복을 허용하며 인덱스가 있어 위치를 지정하여 값을 찾을 수 있다.</li><li><strong>Queue</strong> : FIFO(First In First Out, 선입선출) 형태로 자료를 관리하는 인터페이스</li></ul><h3 id="Map-인터페이스"><a href="#Map-인터페이스" class="headerlink" title="Map 인터페이스"></a><div id="map-interface">Map 인터페이스</div></h3><p><img src alt="이미지 준비중"></p><ul><li><strong>Map</strong> : Map은 key와 value의 쌍으로 구성된 객체의 잡합을 처리하기 위한 인터페이스<br>중복되는 키를 허용하지않는다.</li><li><strong>SortedMap</strong> : 키를 오름차순으로 정렬하는 Map 인터페이스</li></ul><hr><h2 id="Set-관련-클래스"><a href="#Set-관련-클래스" class="headerlink" title=" Set 관련 클래스"></a><div id="set"> Set 관련 클래스</div></h2><h4 id="Set-인터페이스는-중복이-없는-집합-객체를-만들-때-유용하다"><a href="#Set-인터페이스는-중복이-없는-집합-객체를-만들-때-유용하다" class="headerlink" title="Set 인터페이스는 중복이 없는 집합 객체를 만들 때 유용하다."></a><code>Set 인터페이스</code>는 중복이 없는 집합 객체를 만들 때 유용하다.</h4><p>Set 인터페이스를 구현한 클래스로는 <strong>HashSet</strong>, <strong>TreeSet</strong>, <strong>LinkedHashSet</strong> 세가지가 있다.<br><img src alt="이미지 준비중"></p><table><thead><tr><th>class</th><th>desc</th></tr></thead><tbody><tr><td><strong>HashSet</strong></td><td>데이터를 해쉬 테이블에 담는 클래스로 순서 없이 저장</td></tr><tr><td><strong>TreeSet</strong></td><td>red-black이라는 트리에 데이터를 담는 클래스로 값에 따라서 순서가 정해진다.<br>데이터를 담으면서 동시에 정렬하기 때문에 HashSet보다 성능상 느리다.</td></tr><tr><td><strong>LinkedHashSet</strong></td><td>헤쉬 테이블에 데이터를 담는데, 저장된 순서에 따라서 순서가 결정된다.</td></tr></tbody></table><h2 id="List-관련-클래스"><a href="#List-관련-클래스" class="headerlink" title=" List 관련 클래스"></a><div id="list"> List 관련 클래스</div></h2><h4 id="List-인터페이스를-구현한-클래스들은-담을-수-있는-크기가-자동으로-증가되므로-데이터의-개수를-확실히-모를-때-유용하다"><a href="#List-인터페이스를-구현한-클래스들은-담을-수-있는-크기가-자동으로-증가되므로-데이터의-개수를-확실히-모를-때-유용하다" class="headerlink" title="List 인터페이스를 구현한 클래스들은 담을 수 있는 크기가 자동으로 증가되므로, 데이터의 개수를 확실히 모를 때 유용하다."></a><code>List 인터페이스</code>를 구현한 클래스들은 담을 수 있는 크기가 자동으로 증가되므로, 데이터의 개수를 확실히 모를 때 유용하다.</h4><p>List 인터페이스를 구현한 클래스로는 <strong>vector</strong>, <strong>ArrayList</strong>, <strong>LinkedList</strong> 세가지가 있다.<br><img src alt="이미지 준비중"></p><table><thead><tr><th>class</th><th>desc</th></tr></thead><tbody><tr><td><strong>vector</strong></td><td>객체 생성시에 크기를 지정할 필요가 없는 배열 클래스</td></tr><tr><td><strong>ArrayList</strong></td><td>Vector</td></tr><tr><td><strong>LinkedList</strong></td><td></td></tr></tbody></table><h2 id="Queue-관련-클래스"><a href="#Queue-관련-클래스" class="headerlink" title=" Queue 관련 클래스"></a><div id="queue"> Queue 관련 클래스</div></h2><h2 id="Map-관련-클래스"><a href="#Map-관련-클래스" class="headerlink" title=" Map 관련 클래스"></a><div id="map"> Map 관련 클래스</div></h2><hr><h1 id="Collection-관련-클래스의-동기화"><a href="#Collection-관련-클래스의-동기화" class="headerlink" title=" Collection 관련 클래스의 동기화"></a><div id="collection-sync"> Collection 관련 클래스의 동기화</div></h1><hr><h3 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h3><ul><li><a href="https://dzone.com/articles/an-introduction-to-the-java-collections-framework" target="_blank" rel="noopener">An Introduction to the Java Collections Framework</a></li><li><a href="https://onsil-thegreenhouse.github.io/programming/java/2018/02/21/java\_tutorial\_1-23/" target="_blank" rel="noopener">https://onsil-thegreenhouse.github.io/programming/java/2018/02/21/java\_tutorial\_1-23/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이 글은 아직 작성 중이며 완성 되지 않은 상태입니다.&lt;br&gt;자바 성능 튜닝 이야기(04 어디에  담아야 하는지…)을 읽고 공부하여 정리한 내용입니다. &lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;index&quot;&gt;목차&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href
      
    
    </summary>
    
      <category term="Book" scheme="https://simhyejin.github.io/categories/Book/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/categories/Book/JAVA/"/>
    
    
      <category term="자바성능튜닝이야기" scheme="https://simhyejin.github.io/tags/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/tags/JAVA/"/>
    
      <category term="Collection" scheme="https://simhyejin.github.io/tags/Collection/"/>
    
  </entry>
  
  <entry>
    <title>[자바성능튜닝이야기] 03 왜 자꾸 String을 쓰지 말라는 거야</title>
    <link href="https://simhyejin.github.io/2019/11/05/javaPerfomanceTunning3/"/>
    <id>https://simhyejin.github.io/2019/11/05/javaPerfomanceTunning3/</id>
    <published>2019-11-05T01:53:22.000Z</published>
    <updated>2019-11-13T09:26:36.962Z</updated>
    
    <content type="html"><![CDATA[<h2 id="문자열"><a href="#문자열" class="headerlink" title="문자열"></a>문자열</h2><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><ul><li>짧은 문자열을 더할 경우 사용</li><li>제일 느림</li></ul><h3 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h3><ul><li><code>스레드 세이프</code>해야 할 경우 사용</li></ul><h3 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h3><ul><li>스레드 세이프하지 않아도 될 때 사용</li><li>가장 빠름</li></ul><h2 id="JDK-5-0-이상"><a href="#JDK-5-0-이상" class="headerlink" title="JDK 5.0 이상"></a>JDK 5.0 이상</h2><p>JDK 5.0 이상부터는 <code>컴파일러</code>가 String으로 문자열을 더할 때 <u><b>StringBuilder로 변환</b></u>된다.</p><p>그래도<br>String 클래스를 쓰는 대신 스레드와 관련이 있으면 <code>StringBuffer</code>를<br>스레드 안전 여부와 상관이 없으면 <code>StringBuilder</code>를 사용을 권장!</p><p>for 문에서 String 더하기를 할 경우 컴파일러가 StringBuilder로 변환은 하지만<br>결국엔 Stirng이 객체를 반복적으로 생성하는 것과 같이 StringBuilder 객체가 반복적으로 생성됨.</p><h4 id="java"><a href="#java" class="headerlink" title="java"></a>java</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span> ; i ++) &#123;</span><br><span class="line">    str += <span class="string">"a"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="compiler-변환"><a href="#compiler-변환" class="headerlink" title="compiler 변환"></a>compiler 변환</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">String str = <span class="string">""</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; <span class="number">10</span> ; i ++) &#123;</span><br><span class="line">    str = (<span class="keyword">new</span> StringBuilder(String.valueOf(str))).append(<span class="string">"a"</span>).toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="내-생각"><a href="#내-생각" class="headerlink" title="내 생각"></a>내 생각</h2><p>직접 속도와 메모리 사용량을 비교해보면 좋을거 같다.<br>컴파일 결과도 볼 수 있으면 좋고! 나중에…</p><h2 id="참고"><a href="#참고" class="headerlink" title="참고"></a>참고</h2><ul><li><a href="https://cjh5414.github.io/why-StringBuffer-and-StringBuilder-are-better-than-String/" target="_blank" rel="noopener">개인블로그 - StringBuffer, StringBuilder 가 String 보다 성능이 좋은 이유와 원리</a></li><li><a href="https://okky.kr/article/157679" target="_blank" rel="noopener">okky - 문자열(String) 붙일때 요령</a></li><li><a href="https://gist.github.com/benelog/b81b4434fb8f2220cd0e900be1634753" target="_blank" rel="noopener">GitHub -jdk1.5에서 String 더하기의 컴파일시의 최적화</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;문자열&quot;&gt;&lt;a href=&quot;#문자열&quot; class=&quot;headerlink&quot; title=&quot;문자열&quot;&gt;&lt;/a&gt;문자열&lt;/h2&gt;&lt;h3 id=&quot;String&quot;&gt;&lt;a href=&quot;#String&quot; class=&quot;headerlink&quot; title=&quot;String&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Book" scheme="https://simhyejin.github.io/categories/Book/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/categories/Book/JAVA/"/>
    
    
      <category term="자바성능튜닝이야기" scheme="https://simhyejin.github.io/tags/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/tags/JAVA/"/>
    
      <category term="String" scheme="https://simhyejin.github.io/tags/String/"/>
    
      <category term="StringBuffer" scheme="https://simhyejin.github.io/tags/StringBuffer/"/>
    
      <category term="StringBuilder" scheme="https://simhyejin.github.io/tags/StringBuilder/"/>
    
  </entry>
  
  <entry>
    <title>[자바성능튜닝이야기] 02 내가 만든 프로그램의 속도를 알고 싶다</title>
    <link href="https://simhyejin.github.io/2019/11/05/javaPerfomanceTunning2/"/>
    <id>https://simhyejin.github.io/2019/11/05/javaPerfomanceTunning2/</id>
    <published>2019-11-05T01:39:39.000Z</published>
    <updated>2019-11-13T09:26:34.002Z</updated>
    
    <content type="html"><![CDATA[<h2 id="프로파일링-툴-vs-APM-툴"><a href="#프로파일링-툴-vs-APM-툴" class="headerlink" title="프로파일링 툴 vs APM 툴"></a>프로파일링 툴 vs APM 툴</h2><table><thead><tr><th></th><th>프로파일링툴</th><th>APM 툴</th></tr></thead><tbody><tr><td>목적</td><td>소스 레벨의 분석을 위한 툴</td><td>실시간 모니터링을 위한 툴</td></tr><tr><td>특징</td><td>1. 애플리케이션의 세부 응답 시간까지 분석할 수 있다.<br>2. 메모리 사용량을 객체나 클래스, 소스의 라인 단위까지 분석할 수 있다.</td><td>1. 애플리케이션의 장애 상황에 대한 모니터링 및 문제점 진단<br>2. 서버의 사용자 수나 리소스에 대한 모니터링을 할 수 있다.</td></tr></tbody></table><p>* AMP = Application Performance Mornitoring</p><h3 id="scouter"><a href="#scouter" class="headerlink" title="scouter"></a>scouter</h3><p>요새 자주 사용하고 있는 모니터링 툴:D<br><a href="https://github.com/scouter-project/scouter" target="_blank" rel="noopener">스카우터</a>는 APM이다</p><blockquote><p>Scouter is an open source APM (Application Performance Management) tool.</p></blockquote><hr><h2 id="System-클래스"><a href="#System-클래스" class="headerlink" title="System 클래스"></a>System 클래스</h2><h3 id="System-currentTimeMillis-vs-System-nanoTime"><a href="#System-currentTimeMillis-vs-System-nanoTime" class="headerlink" title="System.currentTimeMillis() vs System.nanoTime()"></a>System.currentTimeMillis() vs System.nanoTime()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">currentTimeMillis</span><span class="params">()</span></span></span><br><span class="line"><span class="function">: 현재의 시간을 <span class="title">ms</span><span class="params">(밀리초)</span>로 리턴한다.<span class="params">(<span class="number">1</span>/<span class="number">1</span>,<span class="number">000</span>초)</span></span></span><br></pre></td></tr></table></figure><p>currentTimeMillis()는 UTC라는 시간 표준 체계를 따르는데, 1970년 1월 1일부터의 시간을 long타입으로 리턴해 준다. 이 시간값을 변환하면 현재 날짜를 구할 수도 있다.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">long</span> <span class="title">nanoTime</span><span class="params">()</span></span></span><br><span class="line"><span class="function">: 현재의 시간을 <span class="title">ns</span><span class="params">(나노초)</span>로 리턴한다.<span class="params">(<span class="number">1</span>/<span class="number">1</span>,<span class="number">000</span>,<span class="number">000</span>,<span class="number">000</span>초)</span></span></span><br></pre></td></tr></table></figure><p>nanoTime()은 JDK 5.0부터 추가된 메서드다.<br>nanoTime()은 시간 측정 목적으로 사용된다.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;프로파일링-툴-vs-APM-툴&quot;&gt;&lt;a href=&quot;#프로파일링-툴-vs-APM-툴&quot; class=&quot;headerlink&quot; title=&quot;프로파일링 툴 vs APM 툴&quot;&gt;&lt;/a&gt;프로파일링 툴 vs APM 툴&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;
      
    
    </summary>
    
      <category term="Book" scheme="https://simhyejin.github.io/categories/Book/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/categories/Book/JAVA/"/>
    
    
      <category term="자바성능튜닝이야기" scheme="https://simhyejin.github.io/tags/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/tags/JAVA/"/>
    
      <category term="프로파일링툴" scheme="https://simhyejin.github.io/tags/%ED%94%84%EB%A1%9C%ED%8C%8C%EC%9D%BC%EB%A7%81%ED%88%B4/"/>
    
      <category term="APM툴" scheme="https://simhyejin.github.io/tags/APM%ED%88%B4/"/>
    
  </entry>
  
  <entry>
    <title>[자바성능튜닝이야기] 01 디자인 패턴, 꼭 써야한다.</title>
    <link href="https://simhyejin.github.io/2019/11/04/javaPerfomanceTunning1/"/>
    <id>https://simhyejin.github.io/2019/11/04/javaPerfomanceTunning1/</id>
    <published>2019-11-04T08:47:09.000Z</published>
    <updated>2019-11-13T09:26:29.786Z</updated>
    
    <content type="html"><![CDATA[<p>이 글은 아직 작성 중이며 완성 되지 않은 상태입니다.<br>자바 성능 튜닝 이야기(01 디자인 패턴, 꼭 써야한다.)을 읽고 공부하여 정리한 내용입니다. </p><hr><div id="index">목차</div><ul><li><a href="#MVC">MVC 패턴</a></li><li><a href="#J2EE">J2EE 패턴</a><ul><li><a href="#Intercepting-Filter">Intercepting Filter</a></li><li><a href="#Front-Controller">Front Controller</a></li><li><a href="#Business-Delegate">Business Delegate</a></li></ul></li></ul><hr><h1 id="MVC-패턴"><a href="#MVC-패턴" class="headerlink" title="MVC 패턴"></a><div id="MVC">MVC 패턴</div></h1><p> 정리중 입니다.</p><h1 id="J2EE-패턴"><a href="#J2EE-패턴" class="headerlink" title="J2EE 패턴"></a><div id="J2EE">J2EE 패턴</div></h1><p><a href="http://www.corej2eepatterns.com/index.htm" target="_blank" rel="noopener">core J2EE PATTERNS</a><br><img src="http://www.corej2eepatterns.com/images/CJP2Catalog.gif" alt="CJP2Catalog"></p><h2 id="Intercepting-Filter"><a href="#Intercepting-Filter" class="headerlink" title="Intercepting Filter"></a><div id="Intercepting-Filter"><a href="http://www.corej2eepatterns.com/InterceptingFilter.htm" target="_blank" rel="noopener">Intercepting Filter</a></div></h2><h3 id="정의"><a href="#정의" class="headerlink" title="정의"></a>정의</h3><ul><li>요청 타입에 따라 다른 처리를 하기 위한 패턴</li><li>Use an Intercepting Filter as a pluggable filter to pre and postprocess requests and responses.<br>A filter manager combines loosely coupled filters in a chain, delegating control to the appropriate filter.<br>In this way, you can add, remove, and combine these filters in various ways without changing existing code.<br><img src="http://www.corej2eepatterns.com/images/IFMainClass.gif" alt="IFMainClass"></li></ul><h3 id="결과"><a href="#결과" class="headerlink" title="결과"></a>결과</h3><h3 id="내이해"><a href="#내이해" class="headerlink" title="내이해"></a>내이해</h3><h3 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h3><ul><li><a href="http://www.corej2eepatterns.com/InterceptingFilter.htm" target="_blank" rel="noopener">corej2eepatterns - Intercepting Filter</a></li><li><a href="https://hamait.tistory.com/362" target="_blank" rel="noopener">개인블로그 - J2EE - intercepting filter 패턴</a></li><li><a href="https://en.wikipedia.org/wiki/Intercepting_filter_pattern" target="_blank" rel="noopener">위키피디아 - Intercepting filter pattern</a></li><li></li></ul><h2 id="Front-Controller"><a href="#Front-Controller" class="headerlink" title="Front Controller"></a><div id="Front-Controller"><a href="http://www.corej2eepatterns.com/FrontController.htm" target="_blank" rel="noopener">Front Controller</a></div></h2><h3 id="정의-1"><a href="#정의-1" class="headerlink" title="정의"></a>정의</h3><ul><li>Use a Front Controller as the initial point of contact for handling all related requests.<br>The Front Controller centralizes control logic that might otherwise be duplicated, and manages the key request handling activities.</li><li>요청 전후에 처리하기위한 컨트롤러를 지정하는 패턴<br><img src="http://www.corej2eepatterns.com/images/FCMainClass.gif" alt="FCMainClass"></li></ul><h3 id="장점"><a href="#장점" class="headerlink" title="장점"></a>장점</h3><ul><li>중앙 집중 제어 (Centralizes control)</li><li>관리성 향상 (Improves manageability)</li><li>재사용성 향상 (Improves reusability)</li><li>역할 분리 향상(Improves role separation)</li></ul><h3 id="내이해-1"><a href="#내이해-1" class="headerlink" title="내이해"></a>내이해</h3><ul><li>모든 요청을 중앙 관리하는 컨트롤러</li><li>Spring의 DispatcherServlet</li></ul><h3 id="참조-1"><a href="#참조-1" class="headerlink" title="참조"></a>참조</h3><ul><li><a href="http://www.corej2eepatterns.com/FrontController.htm" target="_blank" rel="noopener">corej2eepatterns - Front Controller</a></li><li><a href="https://en.wikipedia.org/wiki/Front_controller" target="_blank" rel="noopener">위키피디아 - Front controller</a></li><li><a href="https://nesoy.github.io/articles/2017-02/Front-Controller" target="_blank" rel="noopener">개인 블로그 - Spring의 MVC &amp; Front Controller Pattern</a></li><li><a href="https://jayviii.tistory.com/8" target="_blank" rel="noopener">개인 블로그 - 프론트 컨트롤러 패턴, Front Controller Pattern</a></li></ul><h2 id="Business-Delegate-http-www-corej2eepatterns-com-Business-Delegate-htm"><a href="#Business-Delegate-http-www-corej2eepatterns-com-Business-Delegate-htm" class="headerlink" title="[Business Delegate](http://www.corej2eepatterns.com/Business Delegate.htm)"></a><div id="Business-Delegate">[Business Delegate](<a href="http://www.corej2eepatterns.com/Business" target="_blank" rel="noopener">http://www.corej2eepatterns.com/Business</a> Delegate.htm)</div></h2><h3 id="정의-2"><a href="#정의-2" class="headerlink" title="정의"></a>정의</h3><ul><li>Use a Business Delegate to encapsulate access to a business service.<br>The Business Delegate hides the implementation details of the business service, such as lookup and access mechanisms.</li><li>비즈니스 서비스 접근을 캡슐화하는 패턴<br><img src="http://www.corej2eepatterns.com/images/BDMainClass.gif" alt="BDMainClass"></li></ul><h3 id="결과-1"><a href="#결과-1" class="headerlink" title="결과"></a>결과</h3><ul><li>비즈니스 서비스와 프레젠테이션 계층의 커플링(coupling)을 줄이고, 유지보수 향상</li><li>비즈니스 서비스 예외 변환</li><li>가용성 향상</li><li>비즈니스 계층보다 단순하고 균일한 인터페이스 제공</li><li>성능 향상</li><li>원격 숨김</li></ul><h3 id="내-이해"><a href="#내-이해" class="headerlink" title="내 이해"></a>내 이해</h3><p>직접적인 로직인 서비스단을 숨겨서 프론트단인 클라이언트가 딜리게이터를 통해 실행<br>프론트와 서비스 로직의 중간 매개체</p><h3 id="참조-2"><a href="#참조-2" class="headerlink" title="참조"></a>참조</h3><ul><li><a href="http://www.corej2eepatterns.com/BusinessDelegate.htm" target="_blank" rel="noopener">corej2eepatterns - Business Delegate</a></li><li><a href="https://en.wikipedia.org/wiki/Business_delegate_pattern" target="_blank" rel="noopener">위키피디아 - Business delegate pattern</a></li><li><a href="https://jaepils.github.io/pattern/2018/07/24/pattern-delegate.html" target="_blank" rel="noopener">개인 블로그 - Business delegate pattern</a></li></ul><h2 id="Session-Facade"><a href="#Session-Facade" class="headerlink" title="Session Facade"></a>Session Facade</h2><h3 id="정의-3"><a href="#정의-3" class="headerlink" title="정의"></a>정의</h3><ul><li>비즈니스 티어 컴포넌트를 캡슐화하고, 원격 클라이언트에서 접근할 수 있는 서비스를 제공하는 패턴</li></ul><h3 id="결과-2"><a href="#결과-2" class="headerlink" title="결과"></a>결과</h3><h3 id="내이해-2"><a href="#내이해-2" class="headerlink" title="내이해"></a>내이해</h3><h3 id="참조-3"><a href="#참조-3" class="headerlink" title="참조"></a>참조</h3><h2 id="Service-Locator"><a href="#Service-Locator" class="headerlink" title="Service Locator"></a>Service Locator</h2><h3 id="정의-4"><a href="#정의-4" class="headerlink" title="정의"></a>정의</h3><ul><li>서비스와 컴포넌트 검색을 쉽게하는 패턴</li></ul><h3 id="결과-3"><a href="#결과-3" class="headerlink" title="결과"></a>결과</h3><h3 id="내이해-3"><a href="#내이해-3" class="headerlink" title="내이해"></a>내이해</h3><h3 id="참조-4"><a href="#참조-4" class="headerlink" title="참조"></a>참조</h3><h2 id="Transfer-Object"><a href="#Transfer-Object" class="headerlink" title="Transfer Object"></a>Transfer Object</h2><h3 id="정의-5"><a href="#정의-5" class="headerlink" title="정의"></a>정의</h3><ul><li>일명 Value Object 패턴이라고 많이 알려져 있다. 데이터 전송하기 위한 객체에 대한 패턴</li></ul><h3 id="결과-4"><a href="#결과-4" class="headerlink" title="결과"></a>결과</h3><h3 id="내이해-4"><a href="#내이해-4" class="headerlink" title="내이해"></a>내이해</h3><h3 id="참조-5"><a href="#참조-5" class="headerlink" title="참조"></a>참조</h3><h2 id="Data-Access-Object"><a href="#Data-Access-Object" class="headerlink" title="Data Access Object"></a>Data Access Object</h2><h3 id="정의-6"><a href="#정의-6" class="headerlink" title="정의"></a>정의</h3><ul><li>일명 DAO라고 많이 알려져있다. DB에 접근을 전담하는 클래스를 추상화하고 캡슐화</li></ul><h3 id="결과-5"><a href="#결과-5" class="headerlink" title="결과"></a>결과</h3><h3 id="내이해-5"><a href="#내이해-5" class="headerlink" title="내이해"></a>내이해</h3><h3 id="참조-6"><a href="#참조-6" class="headerlink" title="참조"></a>참조</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이 글은 아직 작성 중이며 완성 되지 않은 상태입니다.&lt;br&gt;자바 성능 튜닝 이야기(01 디자인 패턴, 꼭 써야한다.)을 읽고 공부하여 정리한 내용입니다. &lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;index&quot;&gt;목차&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a hr
      
    
    </summary>
    
      <category term="Book" scheme="https://simhyejin.github.io/categories/Book/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/categories/Book/JAVA/"/>
    
    
      <category term="자바성능튜닝이야기" scheme="https://simhyejin.github.io/tags/%EC%9E%90%EB%B0%94%EC%84%B1%EB%8A%A5%ED%8A%9C%EB%8B%9D%EC%9D%B4%EC%95%BC%EA%B8%B0/"/>
    
      <category term="JAVA" scheme="https://simhyejin.github.io/tags/JAVA/"/>
    
      <category term="J2EE패턴" scheme="https://simhyejin.github.io/tags/J2EE%ED%8C%A8%ED%84%B4/"/>
    
      <category term="MVC패턴" scheme="https://simhyejin.github.io/tags/MVC%ED%8C%A8%ED%84%B4/"/>
    
  </entry>
  
  <entry>
    <title>TIME_WAIT State</title>
    <link href="https://simhyejin.github.io/2016/07/13/TIME-WAIT/"/>
    <id>https://simhyejin.github.io/2016/07/13/TIME-WAIT/</id>
    <published>2016-07-13T07:47:10.000Z</published>
    <updated>2019-11-05T02:40:25.524Z</updated>
    
    <content type="html"><![CDATA[<p><em>TIME&#95;WAIT</em> 상태가 늘어나면 소켓이 고갈되어 커넥션 타임아웃이 발생한다는 얘기가 있다. <em>TIME&#95;WAIT</em> 은 어떠한 경우에 발생하고 어떤 특징이 있는지 살펴보고 소켓 고갈과의 연관성을 알아본다.</p><hr><div id="index">목차</div><ul><li><a href="#sec1">TCP Connecion Close : 4 way hand-shake</a></li><li><a href="#sec2">TIME_WAIT</a></li><li><a href="#sec3">Linger 옵션</a></li></ul><hr><h2 id="TCP-Close-4-way-hand-shake"><a href="#TCP-Close-4-way-hand-shake" class="headerlink" title="TCP Close : 4 way hand-shake"></a><div id="sec1">TCP Close : 4 way hand-shake</div></h2><p>먼저 TCP의 Connection Close에 살펴본다.<br>TCP는 Connection 연결을 3 Way Hand-Shake의 방식을 사용했다면<br>Connection 종료는 <strong>4 Way Hand-Shake</strong>의 방식으로 한다.<br><img src="/images/TCP_close.png" alt="TCP 4 Way Hand Shake"></p><hr><h2 id="TIME-WAIT"><a href="#TIME-WAIT" class="headerlink" title="TIME_WAIT"></a><div id="sec2">TIME_WAIT</div></h2><p><strong>Active Close</strong>, 즉 먼저 <code>close()</code>를 요청한 곳에서 <em>TIME&#95;WAIT</em> state가 발생하며 2MSL동안 기다렸다가 Close 한다.</p><blockquote><p>MSL(Maximum Segment Lifetime)<br>RFC793 specifies the MSL as 2 minutes.<br>Common implementation values, however, are 30 seconds, 1 minute, or 2 minutes. </p></blockquote><h3 id="TIME-WAIT-이-필요한-이유"><a href="#TIME-WAIT-이-필요한-이유" class="headerlink" title="TIME_WAIT 이 필요한 이유"></a>TIME_WAIT 이 필요한 이유</h3><h3 id="TIME-WAIT-특징"><a href="#TIME-WAIT-특징" class="headerlink" title="TIME_WAIT 특징"></a>TIME_WAIT 특징</h3><hr><h2 id="Linger-옵션"><a href="#Linger-옵션" class="headerlink" title="Linger 옵션"></a><div id="sec3">Linger 옵션</div></h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">linger</span> &#123;</span></span><br><span class="line">  <span class="keyword">int</span> l_onoff;    <span class="comment">/* option on/off */</span></span><br><span class="line">  <span class="keyword">int</span> l_linger;   <span class="comment">/* linger time */</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>소켓에는 데이타가 아직 남아 있을때 종료 방식을 결정하는 링거 옵션이 있다. 아래 3가지 경우로 나뉜다.</p><ol><li><code>l_onoff = 1</code>, <code>l_linger = 0</code><br>즉시 종료하고 Buffer에 남아 있는 데이타는 버린다. 비정상 종료로 <code>RST</code>를 보내고 즉시 연결을 끊는다. </li><li><code>l_onoff = 1</code>, <code>l_linger = non-zero</code><br>명시된 시간(초)동안 정상적으로 진행하며 그 이후에는 비정상 종료(RST) 처리한다.<br>만일 Buffer에 전송되지 못한 메시지가 남아 있다면 명시된 시간 동안은 어플리케이션이 <code>close()</code>를 진행하지 못하고 최종적으로 <code>RST</code>를 보내기 위해 <code>sleep</code> 상태에서 대기하기 때문에 어플리케이션 지연 현상이 발생하므로 유의해야 한다. non-blocking 으로 동작하는 것도 가능은 하다.</li><li><code>l_onoff = 0</code><br>정상적인 4-way handshake 종료 과정을 진행하며 소켓의 기본값이다.</li></ol><p><code>RST</code>는 비정상 종료시 보내는 패킷이다. 수신한 상대방은 Connection reset by peer 오류가 나게 된다.<br>양쪽 모두 바로 연결이 끊어지며, 양쪽 모두 <em>TIME&#95;WAIT</em> 상태가 남지 않는다는 점에서 가장 빠르고 깔끔해 유용해보이지만 문제는 <strong>비정상 종료</strong>라는 점이다.<br><code>RST</code>는 부작용를 야기할 수 있다. 또한 양쪽 모두에 <em>TIME&#95;WAIT</em> 을 남기지 않기 때문에 패킷의 오동작을 막아줄 장치가 없다.</p><p>어떠한 <em>TIME&#95;WAIT</em> 도 남아 있지 않아야 할 특수한 목적이 아니라면, 일반적으로는 링거 옵션을 사용하지 않아야 하고 <code>RST</code> 비정상 종료 패킷을 보내는 일이 없어야 한다.</p><hr><h2 id="정리"><a href="#정리" class="headerlink" title="정리"></a>정리</h2><p>잦은 연결과 종료는 <em>TIME&#95;WAIT</em> 상태로 소켓 고갈이 일어날 수 있다.<br>대부분의 문서를 찾아보면 <code>Linger</code> 옵션을 통해 <em>TIME&#95;WAIT</em> 을 없애려고 한다. 하지만 TCP Protocol은 오랜 역사를 가지고 변해왔지만 <em>TIME&#95;WAIT</em> 기능은 여전히 남아있다. 이는 <em>TIME&#95;WAIT</em> 상태가 필요한 존재이기 때문이지 않을까.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;em&gt;TIME&amp;#95;WAIT&lt;/em&gt; 상태가 늘어나면 소켓이 고갈되어 커넥션 타임아웃이 발생한다는 얘기가 있다. &lt;em&gt;TIME&amp;#95;WAIT&lt;/em&gt; 은 어떠한 경우에 발생하고 어떤 특징이 있는지 살펴보고 소켓 고갈과의 연관성을 알아본다.
      
    
    </summary>
    
      <category term="CSE" scheme="https://simhyejin.github.io/categories/CSE/"/>
    
      <category term="NETWORK" scheme="https://simhyejin.github.io/categories/CSE/NETWORK/"/>
    
    
      <category term="tcp/ip" scheme="https://simhyejin.github.io/tags/tcp-ip/"/>
    
      <category term="network" scheme="https://simhyejin.github.io/tags/network/"/>
    
      <category term="tcp close" scheme="https://simhyejin.github.io/tags/tcp-close/"/>
    
      <category term="TIME_WAIT" scheme="https://simhyejin.github.io/tags/TIME-WAIT/"/>
    
      <category term="4 Way Hand Shake" scheme="https://simhyejin.github.io/tags/4-Way-Hand-Shake/"/>
    
  </entry>
  
  <entry>
    <title>Tip 1 : 연결지향(Connection Oriented) 프로토콜과 비연결(Connectionless) 프로토콜의 차이점을 이해하라!</title>
    <link href="https://simhyejin.github.io/2016/07/04/connectionoriented-connectionless/"/>
    <id>https://simhyejin.github.io/2016/07/04/connectionoriented-connectionless/</id>
    <published>2016-07-04T12:33:09.000Z</published>
    <updated>2019-11-05T02:01:28.837Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tip-1-Understand-the-Difference-between-Connected-and-Connectionless-Protocols"><a href="#Tip-1-Understand-the-Difference-between-Connected-and-Connectionless-Protocols" class="headerlink" title="Tip 1 : Understand the Difference between Connected and Connectionless Protocols"></a>Tip 1 : Understand the Difference between Connected and Connectionless Protocols</h3><p>네트워크를 공부하다보면 <code>연결지향(Connection-Oriented)</code>와 <code>비연결(Connectionless)</code>라는 말을 들어보셨을 것입니다.<br>이번 포스트는 Connection-Oriented과 Connectionless에 대해 포스트하겠습니다.</p><hr><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><p>TCP는 Connection-Oriented 프로토콜 입니다. 1:1로 연결 상태를 유지하여 통신하는 것을 말합니다.<br>IP와 UDP 는 Connectionless 프로토콜 입니다. 연결 상태를 유지하는 것이 아니라 주소를 가지고 다음 라우터나 목적지로 전달만 하여 데이타그램에 대해 관여 하지 않습니다. </p><hr><h4 id="Connection-Oriented-와-Connectionless-비교"><a href="#Connection-Oriented-와-Connectionless-비교" class="headerlink" title="Connection Oriented 와 Connectionless 비교"></a>Connection Oriented 와 Connectionless 비교</h4><table><thead><tr><th align="center">Connection Oriented</th><th align="center">Connectionless</th></tr></thead><tbody><tr><td align="center">TCP</td><td align="center">IP, UDP</td></tr><tr><td align="center">Segment</td><td align="center">Datagram</td></tr><tr><td align="center">프로토콜에 의해 연속적으로<br>패킷의 상태 정보 유지<sup><a href="#maintain_state">1</a></sup></td><td align="center">각각의 패킷들이 독립적<sup><a href="#independence">2</a></sup></td></tr><tr><td align="center">reliable</td><td align="center">unreliable</td></tr><tr><td align="center">1:1</td><td align="center">1:N<br>N:M</td></tr></tbody></table><h4 id="Connection-Oriented-Protocol의-3단계"><a href="#Connection-Oriented-Protocol의-3단계" class="headerlink" title="Connection Oriented Protocol의 3단계"></a>Connection Oriented Protocol의 3단계</h4><ol><li>연결 (Connection Establish)</li><li>데이타 전송 단계(Data Transfer)</li><li>연결 종료 (Connection Colose)</li></ol><h4 id="✩Connectionless-Protocol은-Connection-Oriented-Protocol의-기반이다-✩"><a href="#✩Connectionless-Protocol은-Connection-Oriented-Protocol의-기반이다-✩" class="headerlink" title="✩Connectionless Protocol은 Connection Oriented Protocol의 기반이다.✩"></a>✩Connectionless Protocol은 Connection Oriented Protocol의 기반이다.✩</h4><p>TCP/IP은 4계층의 프로토콜 스택으로 이루어져있습니다.</p><table><thead><tr><th align="center">TCP/IP은 4계층</th></tr></thead><tbody><tr><td align="center">Application</td></tr><tr><td align="center">TCP/UDP</td></tr><tr><td align="center">IP</td></tr><tr><td align="center">Interface</td></tr></tbody></table><p><strong>TCP</strong>와 <strong>UDP</strong>는 <strong>IP</strong> 프로토콜 위에 존재합니다. 즉, <strong>IP</strong>는 TCP/IP 스택이 만들어지는 기초가 됩니다.<br><strong>IP</strong>는 성능 중심(Best Effort)의 unreliable, Connecionless 서비스를 제공합니다. 상위 계층에서 패킷을 받아 IP 패킷으로 캡슐화하고 이를 하드웨어 인터페이스에 전송합니다. <strong>IP</strong>는 한번 전송하면 그 패킷에 관여하지 않습니다.</p><h5 id="TCP가-Connectionless-IP위에서-어떻게-연결형-서비스를-하는지-알아-보겠습니다"><a href="#TCP가-Connectionless-IP위에서-어떻게-연결형-서비스를-하는지-알아-보겠습니다" class="headerlink" title="TCP가 Connectionless IP위에서 어떻게 연결형 서비스를 하는지 알아 보겠습니다."></a>TCP가 Connectionless IP위에서 어떻게 연결형 서비스를 하는지 알아 보겠습니다.</h5><p>TCP는 <code>세그먼트(Segment)</code>라 불리는 패킷을 unreliable한 IP 데이타그램(Datagram)을 통해서 손상시키지않고 순서대로 목적지에 도달하도록 합니다.<br>신뢰성을 제공하기위해 TCP는 기본 IP 서비스에서 3가지 추가했습니다. </p><ol><li>TCP 세그먼트 내의 <strong>Cheksum</strong>을 제공한다. 데이터가 전송 도중에 손상되지 않았음을 증명합니다. </li><li>각 바이트 마다 일정한 <strong>Sequence Number</strong>할당합니다. 데이터가 순서대로 도착하지 않을경우 바로 잡을 수 있습니다.</li><li>TCP는 모든 세그먼트가 잘 도착하였는지 알기 위해 <strong>Acknowledgment &amp; Retransmission</strong> 메커니즘을 제공합니다.</li></ol><p>UDP는 신뢰성 없는 비연결 서비스를 제공합니다. IP 프로토콜에 2가지 기능을 추가했습니다.<br>UDP = 기본 IP 서비스 + (<strong>선택적 CheckSum</strong> + <strong>Port</strong>)<br>TCP/UDP는 자신의 고유 헤더와 데이터를 보호하기 위해 체크섬 제공.<br>포트는 데이터를 올바른 목적지 애플리케이션에 역다중화하는 방법을 제공.</p><hr><div id="maintain_state">[1] 패킷의 상태 정보 유지 </div> : 전화와 같다. 전화로 대화하는 동안 누구와 통화를 하는지 이미 알고 있다. 또한 전화가 열결되어 있는 동안 상대방의 전화번호를 다시 누를 필요도 없다. [⤿]()<div id="independence">[2] 각가의 패킷들이 독립적 </div> : 편지와 같다. 편지들은 서로 간의 정보를 유지하지 않는다. 또한, 우체국은 편지가 분실되거나 지연되거나 배달 순서가 바뀌어 전달되지 않아도 보증하지 않는다.<hr><blockquote><p><strong>Effective TCP/IP Programming</strong><br>&#45; 44 Tips to Improve Your Network Programs<pre>                    <em>by C. Snader</em></pre></p></blockquote><hr><h4 id="CSE-Network"><a href="#CSE-Network" class="headerlink" title="#CSE #Network"></a><a href="https://simhyejin.github.io/categories/CSE/">#CSE</a> <a href="https://simhyejin.github.io/tags/network/">#Network</a></h4><p>다음 포스트 &gt; <a href></a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;Tip-1-Understand-the-Difference-between-Connected-and-Connectionless-Protocols&quot;&gt;&lt;a href=&quot;#Tip-1-Understand-the-Difference-between-Co
      
    
    </summary>
    
      <category term="CSE" scheme="https://simhyejin.github.io/categories/CSE/"/>
    
      <category term="NETWORK" scheme="https://simhyejin.github.io/categories/CSE/NETWORK/"/>
    
    
      <category term="tcp/ip" scheme="https://simhyejin.github.io/tags/tcp-ip/"/>
    
      <category term="network" scheme="https://simhyejin.github.io/tags/network/"/>
    
      <category term="connection oriented" scheme="https://simhyejin.github.io/tags/connection-oriented/"/>
    
      <category term="connectionless" scheme="https://simhyejin.github.io/tags/connectionless/"/>
    
  </entry>
  
  <entry>
    <title>Hexo Generator Alias</title>
    <link href="https://simhyejin.github.io/2016/06/30/hexo-generator-alias/"/>
    <id>https://simhyejin.github.io/2016/06/30/hexo-generator-alias/</id>
    <published>2016-06-30T12:54:41.000Z</published>
    <updated>2019-11-04T08:38:41.489Z</updated>
    
    <content type="html"><![CDATA[<p>이번 포스트는 <code>Hexo Generator Alias</code>라는 플러그인에 대해 소개하겠습니다.<br>저는 <em>url Redirection</em> 을 하기 위해 사용하였습니다.</p><p>얼마 전 <strong>검색 엔진 최적화(SEO)</strong>에 맞춰 url을 내용과 구체적으로 관련있게 하기위해 포스트 파일명의 이름을 변경하였습니다.<br>2번째 포스트인 <a href="https://simhyejin.github.io/2016/06/20/hexo-github-pages/">Hexo+GitHub pages</a>은 포스트 파일 명이 <code>hexo-git</code> 에서 <code>hexo-github-pages</code> 으로 변경되었습니다.</p><p><img src="/images/dup_hexo_git.png" alt></p><p>이미 색인된 상태인지 구글에 예전 페이지가 남아있어 404 에러를 발생시켰습니다.<br><strong>구글 웹마스터 도구 &gt; Google 색인 &gt; URL 삭제</strong>로 이전 URL을 삭제하였습니다. 하지만, ‘url 오류’라는 <strong>크롤링 오류</strong>가 계속 발생하여 <code>Hexo Generator Alias 플러그인</code>으로 이전 URL을 현 URL로 Redirecion 하였습니다. </p><hr><h2 id="Hexo-Generator-Alias-플러그인"><a href="#Hexo-Generator-Alias-플러그인" class="headerlink" title="Hexo Generator Alias 플러그인"></a>Hexo Generator Alias 플러그인</h2><p><a href="https://github.com/hexojs/hexo-generator-alias" target="_blank" rel="noopener">Hexo Generator Alias</a> : Generates alias pages for redirecting to posts, pages or URL.<br>URL, 페이지, 포스트로 리다이렉션하기 위한 에일리어스 페이지를 생성하는 플러그인이다.</p><h4 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h4><p>터미널을 열고 <strong>hexo</strong>가 설치되어있는 <strong>blog 폴더</strong>에서 npm을 통해 <code>Hexo Generator Alias 플러그인</code>을 설치한다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-alias --save</span><br></pre></td></tr></table></figure><hr><h4 id="이용법"><a href="#이용법" class="headerlink" title="이용법"></a>이용법</h4><ul><li>Post file 에서 alias <figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">alias: about/index.html</span><br><span class="line"></span><br><span class="line">alias:</span><br><span class="line"><span class="bullet">- </span>about/index.html</span><br><span class="line"><span class="bullet">- </span>bar/index.html</span><br></pre></td></tr></table></figure></li></ul><p>또는 </p><ul><li><code>_config.yml</code>에서 alias<figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias:</span></span><br><span class="line">  <span class="attr">api/index.html:</span> <span class="string">api/classes/Hexo.html</span></span><br><span class="line">  <span class="attr">plugins/index.html:</span> <span class="string">https://github.com/tommy351/hexo/wiki/Plugins</span></span><br></pre></td></tr></table></figure></li></ul><hr><h4 id="나의-사용기"><a href="#나의-사용기" class="headerlink" title="나의 사용기"></a>나의 사용기</h4><p>저는 2번째 방법인 <code>_config.yml</code>에서 alias를 지정했습니다.<br><code>이전 페이지 html path : 현재 페이지 html path</code>를 설정하시면 됩니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">alias:</span></span><br><span class="line">  <span class="string">/2016/06/20/hexo-git/index.html:</span> <span class="string">/2016/06/20/hexo-github-pages/index.html</span></span><br></pre></td></tr></table></figure><p>이로 인해<br><a href="https://simhyejin.github.io/2016/06/20/hexo-git/">https://simhyejin.github.io/2016/06/20/hexo-git/</a><br>— <code>Redirection</code> —&gt;<br><a href="https://simhyejin.github.io/2016/06/20/hexo-github-pages/">https://simhyejin.github.io/2016/06/20/hexo-github-pages/</a><br>이전 페이지 url을 눌러도 현 페이지로 이동합니다.<br><img src="/images/redirection.png" alt><br>URL Redirect로 삭제된 페이지를 현 페이지에 연결하는 것은 좋은 방법이 아닌것 같습니다.<br>하지만, 404 에러를 발생시키는 이전 페이지 노출로 인해 URL Redirection을 해보았습니다.<br><code>Hexo Generator Alias 플러그인</code>으로 리다이렉션 하는 법 말고 다른 좋은 방법을 아시는 분은 알려주세요:)</p><hr><h4 id="Blog-Hexo-Plugin"><a href="#Blog-Hexo-Plugin" class="headerlink" title="#Blog #Hexo #Plugin"></a><a href="https://simhyejin.github.io/tags/blog/">#Blog</a> <a href="https://simhyejin.github.io/tags/hexo/">#Hexo</a> <a href="https://simhyejin.github.io/tags/plugin/">#Plugin</a></h4><p>&lt; 이전 포스트 <a href="https://simhyejin.github.io/2016/06/24/hexo-themes/">Hexo 테마 적용하기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이번 포스트는 &lt;code&gt;Hexo Generator Alias&lt;/code&gt;라는 플러그인에 대해 소개하겠습니다.&lt;br&gt;저는 &lt;em&gt;url Redirection&lt;/em&gt; 을 하기 위해 사용하였습니다.&lt;/p&gt;
&lt;p&gt;얼마 전 &lt;strong&gt;검색 엔진 최
      
    
    </summary>
    
      <category term="Blog" scheme="https://simhyejin.github.io/categories/Blog/"/>
    
    
      <category term="blog" scheme="https://simhyejin.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="https://simhyejin.github.io/tags/hexo/"/>
    
      <category term="plugin" scheme="https://simhyejin.github.io/tags/plugin/"/>
    
      <category term="hexo generator alias" scheme="https://simhyejin.github.io/tags/hexo-generator-alias/"/>
    
      <category term="redirect" scheme="https://simhyejin.github.io/tags/redirect/"/>
    
      <category term="alias" scheme="https://simhyejin.github.io/tags/alias/"/>
    
  </entry>
  
  <entry>
    <title>[Markdown] 마크다운 문법</title>
    <link href="https://simhyejin.github.io/2016/06/30/Markdown-syntax/"/>
    <id>https://simhyejin.github.io/2016/06/30/Markdown-syntax/</id>
    <published>2016-06-29T16:41:00.000Z</published>
    <updated>2019-11-13T08:46:52.483Z</updated>
    
    <content type="html"><![CDATA[<p>마크다운 문법에 대해 소개하겠습니다. </p><hr><div id="index">목차</div><ul><li><a href="#headers">제목 Headers</a></li><li><a href="#blockquotes">인용 Blockquotes</a></li><li><a href="#code-blocks">코드 블럭 Code Blocks</a></li><li><a href="#inline-code-blocks">인라인 코드 Inline Code Blocks</a></li><li><a href="#emphasis">강조 Emphasis</a></li><li><a href="#horizontal">수평선 Horizontal Rules</a></li><li><a href="#link">링크 Links</a><ul><li><a href="#external-link">외부 링크 External Links</a></li><li><a href="#internal-link">내부 링크 Internal (Anchored) Links</a></li></ul></li><li><a href="#list">리스트 Lists</a><ul><li><a href="#ordered-list">순서 있는 리스트 Ordered Lists</a></li><li><a href="#unordered-list">순서 없는 리스트 Unordered Lists</a></li></ul></li><li><a href="#tables">테이블 Tables</a></li><li><a href="#images">이미지 Adding Images</a></li><li><a href="#footnote">각주 Footnotes</a></li><li><a href="#collapsible">접기 Collapsible</a></li></ul><hr><h1 id="마크다운-문법"><a href="#마크다운-문법" class="headerlink" title="마크다운 문법"></a><div id="markdown-syntax">마크다운 문법</div></h1><h2 id="제목-Headers"><a href="#제목-Headers" class="headerlink" title="제목 Headers"></a><div id="headers">제목 Headers</div></h2><p><code>#</code>으로 시작하는 텍스트.<br><code>#</code>은 하나부터 여섯개까지 쓸 수 있고, <code>#</code>이 늘어날때마다 제목의 수준은 내려간다.<br>(보통 글씨 크기가 작아진다.)</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td># h1<br>## h2<br>### h3<br>#### h4<br>##### h5<br>###### h6</td><td align="left"><h1> h1<br><h2> h2<br><h3> h3<br><h4> h4<br><h5> h5<br><h6> h6</h6></h5></h4></h3></h2></h1></td></tr></tbody></table><p>또는 <code>-</code>, <code>=</code>을 이용하여 h1, h2를 쓸 수 있다.</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>h1<br>===<br><br>h2<br>—</td><td align="left"><h1> h1<br><h2> h2</h2></h1></td></tr></tbody></table><hr><h2 id="인용-Blockquotes"><a href="#인용-Blockquotes" class="headerlink" title="인용 Blockquotes"></a><div id="blockquotes">인용 Blockquotes</div></h2><p><code>&gt;</code>으로 시작하는 텍스트</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>&gt; 인용문</td><td align="left"><blockquote> 인용문 </blockquote></td></tr><tr><td>&gt; 인용문<br>&gt;&gt; 인용문안의 인용문</td><td align="left"><blockquote> 인용문 <blockquote> 인용문안의 인용문 </blockquote></blockquote></td></tr></tbody></table><hr><h2 id="코드-블럭-Code-Blocks"><a href="#코드-블럭-Code-Blocks" class="headerlink" title="코드 블럭 Code Blocks"></a><div id="code-blocks">코드 블럭 Code Blocks</div></h2><p><code>```</code> 혹은 <code>~~~</code><br>코드 첫 줄과 마지막 줄에 Back quote ( ` ) 또는 물결( ~ ) 3개 삽입</p><table><thead><tr><th>마크다운</th><th align="center">실행결과</th></tr></thead><tbody><tr><td>```<br>이것은<br>코드 블럭<br>입니다<br>```<br><br>~~~<br> 이것은 <br>코드 블럭<br>입니다<br>~~~</td><td align="center"><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">이것은</span><br><span class="line">코드 블럭</span><br><span class="line">입니다</span><br></pre></td></tr></table></figure><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">이것은</span><br><span class="line">코드 블럭</span><br><span class="line">입니다</span><br></pre></td></tr></table></figure></td></tr><tr><td>첫 ``` 옆에 타입을 지정할 수 있다. <br>(ex c, java, xml, json 등등) <br>```c<br>void f()<br><pre>    printf(%s,“이것은 c 코드 입니다”);</pre>}<br>```</td><td align="center"><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(%s,<span class="string">"이것은 c 코드 입니다"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></td></tr></tbody></table><hr><h2 id="인라인-코드-Inline-Code-Blocks"><a href="#인라인-코드-Inline-Code-Blocks" class="headerlink" title="인라인 코드 Inline Code Blocks"></a><div id="inline-code-blocks">인라인 코드 Inline Code Blocks</div></h2><p><code>`(Back quote)</code>로 감싸진 텍스트</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>`인라인 코드 블럭`</td><td align="left"><code>인라인 코드 블럭</code></td></tr></tbody></table><hr><h2 id="강조-Emphasis"><a href="#강조-Emphasis" class="headerlink" title="강조 Emphasis"></a><div id="emphasis">강조 Emphasis</div></h2><p>기울여 쓰기(italic) : <code>*</code> 또는 <code>_</code>로 감싼 텍스트<br>굴게쓰기(bold) : <code>**</code> 또는 <code>__</code>로 감싼 텍스트</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>*기울여쓰기(italic)*<br>_기울여쓰기(italic)_<br><br>**굵게쓰기(bold)**<br>__굵게쓰기(bold)__</td><td align="left"><em>기울여쓰기(italic)</em><br><em>기울여쓰기(italic)</em><br><br><strong>굵게쓰기(bold)</strong><br><strong>굵게쓰기(bold)</strong></td></tr></tbody></table><hr><h2 id="수평선-Horizontal-Rules"><a href="#수평선-Horizontal-Rules" class="headerlink" title="수평선 Horizontal Rules"></a><div id="horizontal">수평선 Horizontal Rules</div></h2><p><code>-</code> 또는 <code>*</code> 또는 <code>_</code> 을 3개 이상 작성<br>(단, <code>-</code>을 사용할 경우 header로 인식할 수 있으니 이 전 라인은 비워두어야한다.) </p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>---</td><td align="left"><hr></td></tr><tr><td>***</td><td align="left"><hr></td></tr><tr><td>___</td><td align="left"><hr></td></tr></tbody></table><hr><h2 id="링크-Links"><a href="#링크-Links" class="headerlink" title="링크 Links"></a><div id="link">링크 Links</div></h2><h3 id="외부-링크-External-Links"><a href="#외부-링크-External-Links" class="headerlink" title="외부 링크 External Links"></a><div id="external-link">외부 링크 External Links</div></h3><p><code>[링크](http://example.com &quot;링크 설명-마우스 hover시 나타나는 설명 문구&quot;)</code> 인라인 링크<br><code>[링크1][1]</code> <code>[1]: http://example1.com/ &quot;링크1 설명&quot;</code> 참조 링크<br><code>&lt;example.com/&gt;</code> <code>&lt;example@example.com&gt;</code> url 링크</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td><strong>인라인 링크</strong> <pre>[Google](<a href="http://www.google.co.kr" target="_blank" rel="noopener">http://www.google.co.kr</a> "구글")</pre></td><td align="left"><br><a href="http://www.google.co.kr" title="구글" target="_blank" rel="noopener">Google</a></td></tr><tr><td><strong>참조 링크</strong> <br>[Google][1]<br>[Naver][2]<br>[1]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a> “구글”<br>[2]: <a href="http://naver.com/" target="_blank" rel="noopener">http://naver.com/</a> “네이버”</td><td align="left"><br><a href="http://google.com/" title="구글" target="_blank" rel="noopener">Google</a><br><a href="http://naver.com/" title="네이버" target="_blank" rel="noopener">Naver</a></td></tr><tr><td><strong>URL 링크</strong><br>&#60;<a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a><span>&#62;</span><br>&#60;<a href="mailto:example@gmail.com" target="_blank" rel="noopener">example@gmail.com</a>/&#62;</td><td align="left"><br><a href="http://google.com" target="_blank" rel="noopener">http://google.com</a><br><a href="mailto:&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;" target="_blank" rel="noopener">&#x65;&#120;&#x61;&#x6d;&#112;&#108;&#101;&#x40;&#x67;&#x6d;&#97;&#x69;&#108;&#x2e;&#x63;&#x6f;&#109;</a></td></tr></tbody></table><h3 id="내부-링크-Internal-Anchored-Links"><a href="#내부-링크-Internal-Anchored-Links" class="headerlink" title="내부 링크 Internal (Anchored) Links"></a><div id="internal-link">내부 링크 Internal (Anchored) Links</div></h3><p><code>&lt;div id=&quot;index&quot;&gt;목차&lt;/div&gt;</code> html css id를 통해 내부 링크를 사용할 수 있다.<br><code>[링크](#id)</code> 내부 링크</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>[목차](#index)</td><td align="left"><a href="#index">목차</a></td></tr></tbody></table><hr><h2 id="리스트-Lists"><a href="#리스트-Lists" class="headerlink" title="리스트 Lists"></a><div id="list">리스트 Lists</div></h2><h3 id="순서-있는-리스트-Ordered-Lists"><a href="#순서-있는-리스트-Ordered-Lists" class="headerlink" title="순서 있는 리스트 Ordered Lists"></a><div id="ordered-list">순서 있는 리스트 Ordered Lists</div></h3><p><code>No.</code> 숫자 다음 .을 찍는다. (적힌 숫자랑 상관없이 순서대로 번호가 매겨진다.)</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>1. list item 1<br>1. list item 2<br>2. list item 3<br>0. list item 4<br>3. list item 5</td><td align="left"><ol><li>list item 1</li><li>list item 2</li><li>list item 3</li><li>list item 4</li><li>list item 5</li></ol></td></tr></tbody></table><h3 id="순서-없는-리스트-Unordered-Lists"><a href="#순서-없는-리스트-Unordered-Lists" class="headerlink" title="순서 없는 리스트 Unordered Lists"></a><div id="unordered-list">순서 없는 리스트 Unordered Lists</div></h3><p><code>*</code>, <code>+</code>, <code>-</code> 으로 시작</p><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>* list item 1<pre>    * list item 1-1</pre><pre>        * list item 2-1</pre><pre>    * list item 1-2</pre></td><td align="left"><ul><li>list item 1</li><ul><li>list item 1-1</li><ul><li>list item 2-1</li></ul><li>list item 1-2</li></ul></ul></td></tr><tr><td>+ list item 1<pre>    + list item 1-1</pre><pre>        + list item 2-1</pre><pre>    + list item 1-2</pre></td><td align="left"><ul><li>list item 1</li><ul><li>list item 1-1</li><ul><li>list item 2-1</li></ul><li>list item 1-2</li></ul></ul></td></tr><tr><td>- list item 1<pre>    - list item 1-1</pre><pre>        - list item 2-1</pre><pre>    - list item 1-2</pre></td><td align="left"><ul><li>list item 1</li><ul><li>list item 1-1</li><ul><li>list item 2-1</li></ul><li>list item 1-2</li></ul></ul></td></tr><tr><td>* list item 1<pre>    + list item 1-1</pre><pre>        - list item 2-1</pre><pre>    + list item 1-2</pre></td><td align="left"><ul><li>list item 1</li><ul><li>list item 1-1</li><ul><li>list item 2-1</li></ul><li>list item 1-2</li></ul></ul></td></tr></tbody></table><hr><h2 id="테이블-Tables"><a href="#테이블-Tables" class="headerlink" title="테이블 Tables"></a><div id="tables">테이블 Tables</div></h2><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td><strong>테이블 생성</strong><br>Header 1  &#124; Header 2<br>&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; &#124; &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;<br>Content 1  &#124; Content 3<br>Content 2  &#124; Content 4</td><td align="left"><br><table><thead><tr><th>Header 1</th><th>Header 2</th></tr></thead><tbody><tr><td>Content 1</td><td>Content 3</td></tr><tr><td>Content 2</td><td>Content 4</td></tr></tbody></table></td></tr><tr><td><strong>테이블 정렬</strong><br>&#124; Header 1  &#124; Header 2  &#124; Header 3  &#124;<br>&#124; :&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45; &#124; :&#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;: &#124; &#45;&#45;&#45;&#45;&#45;&#45;&#45;&#45;: &#124;<br>&#124; Left       &#124; Center       &#124; Right       &#124;</td><td align="left"><br><table><thead><tr><th style="text-align:left">Header 1</th><th style="text-align:center">Header 2</th><th style="text-align:right">Header 3</th></tr></thead><tbody><tr><td style="text-align:left">Left</td><td style="text-align:center">Center</td><td style="text-align:right">Right</td></tr></tbody></table></td></tr></tbody></table><hr><h2 id="이미지-Adding-Images"><a href="#이미지-Adding-Images" class="headerlink" title="이미지 Adding Images"></a><div id="images">이미지 Adding Images</div></h2><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td><strong>인라인 이미지</strong><pre>!&#91;alt text&#93;&#40;/test.png &#41;</pre></td><td align="left"><img src="/images/test.png" alt="alt text"></td></tr><tr><td><strong>링크 이미지</strong><pre>!&#91;alt text&#93;&#40;image_URL&#41;</pre></td><td align="left"><img src="https://simhyejin.github.io/images/test.png" alt="alt text"></td></tr><tr><td><strong>참조 이미지</strong><br>!&#91;alt text&#93;&#91;1&#93;<br>&#91;1&#93;: /test.png</td><td align="left"><img src="/images/test.png" alt="alt text"></td></tr></tbody></table><hr><h2 id="각주-Footnotes"><a href="#각주-Footnotes" class="headerlink" title="각주 Footnotes"></a><div id="footnote">각주 Footnotes</div></h2><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>각주입니다[^id] <br> [^id]: 각주에 대한 설명.</td><td align="left"><div id="footnotes-p">각주입니다<sup><a href="#footnotes">1</a></sup></div><br><div id="footnotes"><a href="#footnotes-p">1</a> 각주 설명  : 설명설명</div></td></tr></tbody></table><blockquote><p>GitHub에서는 footnote를 지원해주지 않는다.</p></blockquote><p>html 태그를 통해 각주 사용</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">"footnotes-p"</span>&gt;</span>각주입니다<span class="tag">&lt;<span class="name">sup</span>&gt;</span>[1](#footnotes)<span class="tag">&lt;/<span class="name">sup</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span> =<span class="string">"footnotes"</span>&gt;</span>[1](#footnotes-p) 각주 설명  : 설명설명<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h2 id="접기"><a href="#접기" class="headerlink" title="접기"></a><div id="collapsible">접기</div></h2><table><thead><tr><th>마크다운</th><th align="left">실행결과</th></tr></thead><tbody><tr><td>&lt;details&gt;&lt;summary&gt;CLICK ME&lt;/summary&gt;<br>```<br>pythonprint("hello world!")<br>```<br>&lt;/details&gt;</td><td align="left"><details><summary>CLICK ME</summary><br><code>pythonprint(&quot;hello world!&quot;)</code></details></td></tr></tbody></table><hr><h2 id="Blog-Markdown-마크다운"><a href="#Blog-Markdown-마크다운" class="headerlink" title="#Blog #Markdown #마크다운"></a><a href="https://simhyejin.github.io/tags/blog/">#Blog</a> <a href="https://simhyejin.github.io/tags/markdown/">#Markdown</a> <a href="https://simhyejin.github.io/tags/마크다운/">#마크다운</a></h2><p>< 이전 포스트 <a href="https://simhyejin.github.io/2016/06/24/markdown-post-title/">[Markdown] title 대괄호[] 사용하기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;마크다운 문법에 대해 소개하겠습니다. &lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;index&quot;&gt;목차&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#headers&quot;&gt;제목 Headers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#blockquotes&quot;&gt;인용 Bl
      
    
    </summary>
    
      <category term="Blog" scheme="https://simhyejin.github.io/categories/Blog/"/>
    
    
      <category term="markdown" scheme="https://simhyejin.github.io/tags/markdown/"/>
    
      <category term="마크다운" scheme="https://simhyejin.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4/"/>
    
      <category term="markdown syntax" scheme="https://simhyejin.github.io/tags/markdown-syntax/"/>
    
      <category term="마크다운 문법" scheme="https://simhyejin.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4-%EB%AC%B8%EB%B2%95/"/>
    
      <category term="마크다운문법" scheme="https://simhyejin.github.io/tags/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4%EB%AC%B8%EB%B2%95/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 테마 적용하기</title>
    <link href="https://simhyejin.github.io/2016/06/24/hexo-themes/"/>
    <id>https://simhyejin.github.io/2016/06/24/hexo-themes/</id>
    <published>2016-06-24T07:11:20.000Z</published>
    <updated>2019-11-05T02:41:36.828Z</updated>
    
    <content type="html"><![CDATA[<p>이전 포스트 <a href="https://simhyejin.github.io/2016/06/20/hexo-github-pages/">Hexo+GitHub pages</a>에서 <em>Hexo</em> 와 _GitHub Pages_를 연동하여 블로그를 만들었습니다. </p><p>이번 포스트는 테마를 바꿔 블로그를 꾸며 보도록 하겠습니다.<br><strong><em>Hexo</em></strong> 는 다양한 테마를 지원해 줍니다. <a href="https://hexo.io/themes/" target="_blank" rel="noopener">Hexo Themes</a> 에서 원하는 테마를 고를 수 있습니다.<br>데스크탑, 태블릿, 모바일 등 지원 가능한 반응형 테마를 고르기 위해 <strong>responsive</strong>을 검색하였고 그 중 <a href="https://github.com/ppoffice/hexo-theme-hueman" target="_blank" rel="noopener">Hueman</a>이라는 테마를 적용하엿습니다.<br><code>Hueman</code> 테마 적용법과 테마 설정(CSS 수정, Thumbnail, Disqus)에 대해 소개하겠습니다.</p><hr><div id="index">목차</div><ul><li><a href="#hueman">Hueman 테마 적용하기</a><ul><li><a href="#hueman-install">Hueman 설치</a></li><li><a href="#hueman-config">Hueman 설정</a></li></ul></li><li><a href="#theme-color">Theme Color</a></li><li><a href="#thumbnail">Thumbnail</a></li><li><a href="#disqus">Disqus</a></li></ul><hr><h2 id="Hueman-테마-적용하기"><a href="#Hueman-테마-적용하기" class="headerlink" title="Hueman 테마 적용하기"></a><div id="hueman">Hueman 테마 적용하기</div></h2><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a><div id="hueman-install">설치</div></h3><ol><li><p>터미널을 열어 <code>hexo init</code>했던 폴더(이하 <strong>blog</strong> 폴더)에 들어갑니다. Heuman 테마를 <code>themes/hueman</code> 폴더에 clone합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> blog</span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/ppoffice/hexo-theme-hueman.git themes/hueman</span><br></pre></td></tr></table></figure></li><li><p><strong>blog</strong> 폴더에 있는 <code>_config.yml</code>에서 <code>##Theme</code> 부분을 <em>landscape</em> 에서 <em>hueman</em> 으로 수정합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">hueman</span></span><br></pre></td></tr></table></figure></li><li><p><strong>themes/hueman</strong> 폴더에 있는 <code>_config.yml.example</code>를  <code>_config.yml</code>로 바꿉니다.</p></li><li><p>(Optional) 최신 버전을 다운 받기위해 pull해줍니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> themes/hueman</span><br><span class="line">$ git pull</span><br></pre></td></tr></table></figure></li><li><p>(Optional) Hueman 테마의 <code>Insight Search</code> 검색엔진을 사용하기위해 npm으로 <code>hexo-generator-json-content</code>을 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -S hexo-generator-json-content</span><br></pre></td></tr></table></figure></li></ol><h3 id="설정"><a href="#설정" class="headerlink" title="설정"></a><div id="hueman-config">설정</div></h3><p><strong>themes/hueman</strong> 폴더에 있는 <code>_config.yml</code>에서 아래의 테마 설정을 바꿀 수 있습니다.</p><ul><li>Theme <ul><li><code>Menu</code></li><li><code>Customize</code>(Logo, Thema Color, Highlight, Sidebar, Thumbnail, Favicon, Social Links)</li></ul></li><li>Widgets : Recent Posts, Category, Archive, Tag, Tag Cloud, Links</li><li>Search </li><li>Comment : Disqus</li><li>Share </li><li>Plugins</li><li>Miscellaneous</li></ul><hr><h3 id="Theme-Color"><a href="#Theme-Color" class="headerlink" title=" - Theme Color"></a><div id="theme-color"> - Theme Color</div></h3><p>저는 제 로고의 보라색을 따와 <code>Theme Color</code>를 보라색으로 설정했습니다.<br>Hueman 테마의 <code>Theme Color</code>는 오른쪽 사이드바의 <code>Follow</code>영역의 색을 바꾸게 해줍니다.<br>또한 <code>Theme Color</code>는 이외에도 여러군데 사용이됩니다. </p><ul><li>게시물 hover</li><li>글자 드래그</li><li>링크<br>등이 <code>Theme Color</code>가 적용됩니다.<br>저의 <code>Theme Color</code> 보라색인 링크 글씨과 검은색 글씨의 눈으로 보기에 차이가 나지않아서 링크 글씨의 색을 지금 보이는 것과 같은 <a href="https://simhyejin.github.io/2016/06/24/hexo-themes/">하늘색</a>으로 바꾸었습니다.</li></ul><p>** [링크 색 바꾸기] **<br><strong>themes/hueman/source/css/_partial</strong> 폴더의 <code>article.styl</code> 파일을 수정하면 됩니다.</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.article-entry</span><br><span class="line">    <span class="comment">//...</span></span><br><span class="line">    <span class="selector-tag">a</span> <span class="comment">//링크 </span></span><br><span class="line">        <span class="attribute">color</span>: <span class="string">"원하는색상"</span> </span><br><span class="line">    <span class="comment">//...</span></span><br></pre></td></tr></table></figure><p>이 외에도 <code>styl 파일</code>을 수정하면 커스터마이징 가능합니다. </p><hr><h4 id="Thumbnail"><a href="#Thumbnail" class="headerlink" title=" - Thumbnail"></a><div id="thumbnail"> - Thumbnail</div></h4><p><strong>themes/hueman</strong> 폴더에 있는 <code>_config.yml</code>에서 <em>true</em>, <em>false</em> 로 설정 할 수 있습니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">customize:</span></span><br><span class="line"><span class="attr">thumbnail:</span> <span class="literal">true</span> <span class="comment"># enable posts thumbnail, options: true, false</span></span><br></pre></td></tr></table></figure><p><img src="/images/thumbnail.png" alt="thumbnail: false | thumbnail: true"></p><ul><li><strong>포스트에 thumbnail  추가하기</strong><br><code>source/images</code>에 이미지 파일을 넣고 포스트 <a href="https://hexo.io/docs/front-matter.html" target="_blank" rel="noopener">font-matter</a>에 <code>thumbnail</code>을 추가하고 이미지 경로를 넣어줍니다.<figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 테마 적용하기</span><br><span class="line">date: 2016-06-24 16:11:20</span><br><span class="line">thumbnail: /images/hueman.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure></li></ul><p>혹은 이미지 url인 경우에는 <code>thumbnail</code>을 추가하고 이미지 경로 url을 넣어줍니다.</p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: Hexo 테마 적용하기</span><br><span class="line">date: 2016-06-24 16:11:20</span><br><span class="line">thumbnail: https://example.com/image.jpg</span><br><span class="line">---</span><br></pre></td></tr></table></figure><hr><h4 id="Disqus"><a href="#Disqus" class="headerlink" title=" - Disqus"></a><div id="disqus"> - Disqus</div></h4><p><strong>themes/hueman</strong> 폴더에 있는 <code>_config.yml</code>에서 <code>#Comment</code> 부분의 <em>disqus</em> 에 _disqus shortname_을 적어줍니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Comment</span></span><br><span class="line"><span class="attr">comment:</span></span><br><span class="line">    <span class="attr">disqus:</span> <span class="string">[Disqus</span> <span class="string">Shortname]</span> <span class="comment"># enter disqus shortname here</span></span><br></pre></td></tr></table></figure><p><strong>[ShortName 만들기 및 확인하기]</strong><br>먼저 <a href="https://disqus.com/" target="_blank" rel="noopener">Disqus</a> 계정이 있어야합니다. 회원가입 또는 SNS(페이스북, 트위터, 구글)로 로그인 가능합니다.<br>0. Get Started 클릭 후 블로그 이름 설정(예시: aaaaba)[※블로그 이름이 Short Name으로 설정됩니다]<br><img src="/images/Disqus1.png" alt><br>0. 왼쪽 General 클릭하면 ShortName 확인 할수 있습니다.<br><img src="/images/Disqus2.png" alt></p><hr><h4 id="Blog-Hexo"><a href="#Blog-Hexo" class="headerlink" title="#Blog #Hexo"></a><a href="https://simhyejin.github.io/tags/blog/">#Blog</a> <a href="https://simhyejin.github.io/tags/hexo/">#Hexo</a></h4><p>&lt; 이전 포스트 <a href="https://simhyejin.github.io/2016/06/20/hexo-github-pages/">Hexo+GitHub pages</a><br>다음 포스트 &gt; <a href="https://simhyejin.github.io/2016/06/30/hexo-generator-alias/">Hexo Generator Alias</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이전 포스트 &lt;a href=&quot;https://simhyejin.github.io/2016/06/20/hexo-github-pages/&quot;&gt;Hexo+GitHub pages&lt;/a&gt;에서 &lt;em&gt;Hexo&lt;/em&gt; 와 _GitHub Pages_를 연동하여 블
      
    
    </summary>
    
      <category term="Blog" scheme="https://simhyejin.github.io/categories/Blog/"/>
    
    
      <category term="blog" scheme="https://simhyejin.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="https://simhyejin.github.io/tags/hexo/"/>
    
      <category term="themes" scheme="https://simhyejin.github.io/tags/themes/"/>
    
      <category term="hueman" scheme="https://simhyejin.github.io/tags/hueman/"/>
    
      <category term="thumbnail" scheme="https://simhyejin.github.io/tags/thumbnail/"/>
    
      <category term="disqus" scheme="https://simhyejin.github.io/tags/disqus/"/>
    
      <category term="theme color" scheme="https://simhyejin.github.io/tags/theme-color/"/>
    
  </entry>
  
  <entry>
    <title>[Markdown] title 대괄호[] 사용하기</title>
    <link href="https://simhyejin.github.io/2016/06/24/markdown-post-title/"/>
    <id>https://simhyejin.github.io/2016/06/24/markdown-post-title/</id>
    <published>2016-06-24T06:22:11.000Z</published>
    <updated>2019-11-04T08:38:41.494Z</updated>
    
    <content type="html"><![CDATA[<p><code>Hexo</code>로 블로그를 운영하며 <code>마크다운(Markdown)</code>을 사용하여 포스트를 작성하고 있습니다.<br>포스트 제목 앞에 <strong>대괄호</strong>를 썻더니 오류가 발생하였습니다. 이에 대한 해결방안을 가져왔습니다.</p><h2 id="YAMLException-can-not-read-a-block-mapping-entry-해결하기"><a href="#YAMLException-can-not-read-a-block-mapping-entry-해결하기" class="headerlink" title="YAMLException: can not read a block mapping entry 해결하기"></a>YAMLException: can not read a block mapping entry 해결하기</h2><p><img src="/images/post-head.png" alt><br>위 사진과 같이 포스트를 작성할 때 title 앞에 대괄호를 넣으면 아래와 같은 Error가 발생합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ERROR Process failed: _posts/test.md</span><br><span class="line">YAMLException: can not <span class="built_in">read</span> a block mapping entry; a multiline key may not be an implicit key at line 2, column 5:</span><br><span class="line">    date: 2016-06-24 15:19:38</span><br><span class="line">        ^</span><br></pre></td></tr></table></figure><hr><p>해결방법은 간단합니다.<br>아래와 같이 title을 <strong>“” 큰따옴표</strong> or <strong>‘’ 작은따옴표</strong>로 감싸주시면 됩니다.</p><p><img src="/images/post%5B%5D.png" alt></p><p>문제해결 완료 :)</p><hr><h4 id="Blog-Markdown"><a href="#Blog-Markdown" class="headerlink" title="#Blog #Markdown"></a><a href="https://simhyejin.github.io/tags/blog/">#Blog</a> <a href="https://simhyejin.github.io/tags/markdown/">#Markdown</a></h4><p>다음 포스트 &gt;  <a href="https://simhyejin.github.io/2016/06/30/Markdown-help/">[Markdown] 마크다운 문법</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;Hexo&lt;/code&gt;로 블로그를 운영하며 &lt;code&gt;마크다운(Markdown)&lt;/code&gt;을 사용하여 포스트를 작성하고 있습니다.&lt;br&gt;포스트 제목 앞에 &lt;strong&gt;대괄호&lt;/strong&gt;를 썻더니 오류가 발생하였습니다. 이에 대한 
      
    
    </summary>
    
      <category term="Blog" scheme="https://simhyejin.github.io/categories/Blog/"/>
    
    
      <category term="hexo" scheme="https://simhyejin.github.io/tags/hexo/"/>
    
      <category term="post" scheme="https://simhyejin.github.io/tags/post/"/>
    
      <category term="title" scheme="https://simhyejin.github.io/tags/title/"/>
    
      <category term="markdown" scheme="https://simhyejin.github.io/tags/markdown/"/>
    
      <category term="square bracket" scheme="https://simhyejin.github.io/tags/square-bracket/"/>
    
  </entry>
  
  <entry>
    <title>OWASP TOP 10 (2013)</title>
    <link href="https://simhyejin.github.io/2016/06/22/owasp13/"/>
    <id>https://simhyejin.github.io/2016/06/22/owasp13/</id>
    <published>2016-06-22T06:01:47.000Z</published>
    <updated>2019-11-05T02:45:03.741Z</updated>
    
    <content type="html"><![CDATA[<h2 id="OWASP"><a href="#OWASP" class="headerlink" title="OWASP"></a>OWASP</h2><p>OWASP(<a href="https://www.owasp.org/index.php/Main_Page" target="_blank" rel="noopener">Open Web Application Security Project</a>)는 신뢰할 수있는 애플리케이션을 개발 및 유지보수하기 위해 노력하는 오픈 커뮤니티입니다. 주로 애플리케이션에 관한 정보노출, 악성 파일 및 스크립트, 보안 취약점 등을 연구하며, 10대 웹 애플리케이션의 취약점(<code>OWASP TOP 10</code>)을 발표합니다.</p><p><code>Top 10 프로젝트</code>의 목표는 조직에서 직면한 가장 중요한 몇 가지 위험요소를 식별해 애플리케이션 보안에 대한 인식을 향상시키는 데 있습니다.  <code>OWASP TOP 10</code>은 웹 애플리케이션 취약점 중에서 빈도가 높고, 보안상 영향을 크게 줄 수 있는 것들 10가지를 선정하여 2004년, 2007년, 2010년, 2013년을 기준으로 발표하고 있습니다. OWASP의 모든 문서는 애플리케이션 보안성 향상에 관심 있는 모두에게 무료이며 <a href="https://www.owasp.org/index.php/Main_Page" target="_blank" rel="noopener">OWASP</a>홈페이지에서 확인 가능합니다. </p><p>2016년 OWASP TOP 10이 나오기 전에 2013 OWASP TOP 10을 살펴 보려고 합니다. </p><hr><h2 id="2010-과-2013-OWASP-TOP-10-비교"><a href="#2010-과-2013-OWASP-TOP-10-비교" class="headerlink" title="2010 과 2013 OWASP TOP 10 비교"></a>2010 과 2013 OWASP TOP 10 비교</h2><p><img src="/images/owasp10vs13.png" alt="2010 과 2013 OWASP TOP 10 비교"></p><hr><h2 id="2013-OWASP-TOP-10"><a href="#2013-OWASP-TOP-10" class="headerlink" title="2013 OWASP TOP 10"></a>2013 OWASP TOP 10</h2><ul><li><p><code>A1 : Injection (인젝션, 삽입)</code><br>SQL, 운영체제, LDAP 인젝션 취약점은 신뢰할 수 없는 데이터가 명령어나 질의문의 일부분으로서 인터프리터로 보내질 때 발생한다. 공격자의 악의적인 데이터는 예상하지 못하는 명령을 실행하거나 적절한 권한 없이 데이터에 접근하도록 인터프리터를 속일 수 있다.</p></li><li><p><code>A2 : Broken Authentication and Session Management (취약한 인증 및 세션 관리)</code><br>인증과 세션 관리와 관련된 애플리케이션 기능은 정확하게 구현되어 있지 않아서, 공격자가 패스워드, 키 또는 세션 토큰을 해킹하거나 다른 구현 취약점을 공격하여 다른 사용자 ID로<br>가장할 수 있다.</p></li><li><p><code>A3 : Cross-Site Scripting (XSS, 크로스 사이트 스크립팅)</code><br>XSS 취약점은 애플리케이션이 신뢰할 수 없는 데이터를 가져와 적절한 검증이나 제한 없이 웹 브라우저로 보낼 때 발생한다. XSS는 공격자가 피해자의 브라우저에 스크립트를 실행하여 사용자 세션 탈취, 웹 사이트 변조, 악의적인 사이트로 이동할 수 있다.</p></li><li><p><code>A4 : Insecure Direct Object References (안전하지 않은 직접 객체 참조)</code><br>직접 객체 참조는 개발자가 파일, 디렉토리, 데이터베이스 키와 같은 내부 구현 객체를 참조하는 것을 노출시킬 때 발생한다. 접근 통제를 통한 확인이나 다른 보호수단이 없다면, 공격자는 노출된 참조를 조작하여 허가 받지 않은 데이터에 접근할 수 있다.</p></li><li><p><code>A5 : Security Misconfiguration (보안 설정 오류)</code><br>훌륭한 보안은 애플리케이션, 프레임워크, 애플리케이션 서버, 웹 서버, 데이터베이스 서버 및 플랫폼에 대해 보안 설정이 정의되고 적용되어 있다. 기본으로 제공되는 값은 종종 안전하지 않기 때문에 보안 설정은 정의, 구현 및 유지되어야 한다. 또한 소프트웨어는 최신의 상태로 유지해야 한다.</p></li><li><p><code>A6 : Sensitive Data Exposure (민감 데이터 노출)</code><br>많은 웹 애플리케이션들이 신용카드, 개인 식별 정보 및 인증 정보와 같은 중요한 데이터를 제대로 보호하지 않는다. 공격자는 신용카드 사기, 신분 도용 또는 다른 범죄를 수행하는 등 약하게 보호된 데이터를 훔치거나 변경할 수 있다. 중요 데이터가 저장 또는 전송 중이거나 브라우저와 교환하는 경우 특별히 주의하여야 하며, 암호화와 같은 보호조치를 취해야 한다.</p></li><li><p><code>A7 : Missing Function Level Access Control (기능 수준의 접근통제 누락)</code><br>대부분의 웹 애플리케이션은 UI에 해당 기능을 보이게 하기 전에 기능 수준의 접근권한을 확인한다. 그러나, 애플리케이션은 각 기능에 접근하는 서버에 동일한 접근통제 검사를 수행한다. 요청에 대해 적절히 확인하지 않을 경우 공격자는 적절한 권한 없이 기능에 접근하기 위한 요청을 위조할 수 있다.</p></li><li><p><code>A8 : Cross-Site Request Forgery (CSRF, 크로스 사이트 요청 위조)</code><br>CSRF 공격은 로그온 된 피해자의 취약한 웹 애플리케이션에 피해자의 세션 쿠키와 기타 다른 인증정보를 자동으로 포함하여 위조된 HTTP 요청을 강제로 보내도록 하는 것이다.<br>이것은 공격자가 취약한 애플리케이션이 피해자로부터의 정당한 요청이라고 오해할 수 있는 요청들을 강제로 만들 수 있다.</p></li><li><p><code>A9 : Using Components with Known Vulnerabilities (취약점이 있는 컴포넌트 사용)</code><br>컴포넌트, 라이브러리, 프레임워크 및 다른 소프트웨어 모듈은 대부분 항상 전체 권한으로 실행된다. 이러한 취약한 컴포넌트를 악용하여 공격하는 경우 심각한 데이터 손실이<br>발생하거나 서버가 장악된다. 알려진 취약점이 있는 컴포넌트를 사용하는 애플리케이션은 애플리케이션 방어 체계를 손상하거나, 공격 가능한 범위를 활성화하는 등의 영향을 미친다.</p></li><li><p><code>A10 : Unvalidated Redirects and Forwards (검증되지 않은 리다이렉트 및 포워드)</code><br>웹 애플리케이션은 종종 사용자들을 다른 페이지로 리다이렉트 하거나 포워드하고, 대상 페이지를 결정하기 위해 신뢰할 수 없는 데이터를 사용한다. 적절한 검증 절차가 없으면 공격자는 피해자를 피싱 또는 악성코드 사이트로 리다이렉트 하거나 승인되지 않은 페이지에 접근하도록 전달할 수 있다.</p></li></ul><hr><h2 id="참조"><a href="#참조" class="headerlink" title="참조"></a>참조</h2><ul><li>OWASP TOP 10<br><a href="https://www.owasp.org/index.php/Top10#OWASP_Top_10_for_2013" target="_blank" rel="noopener">https://www.owasp.org/index.php/Top10#OWASP_Top_10_for_2013</a><br><a href="https://www.owasp.org/images/2/2c/OWASP_Top_10_-_2013_Final_-_Korean.pdf" target="_blank" rel="noopener">https://www.owasp.org/images/2/2c/OWASP_Top_10_-_2013_Final_-_Korean.pdf</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;OWASP&quot;&gt;&lt;a href=&quot;#OWASP&quot; class=&quot;headerlink&quot; title=&quot;OWASP&quot;&gt;&lt;/a&gt;OWASP&lt;/h2&gt;&lt;p&gt;OWASP(&lt;a href=&quot;https://www.owasp.org/index.php/Main_Page&quot; 
      
    
    </summary>
    
      <category term="CSE" scheme="https://simhyejin.github.io/categories/CSE/"/>
    
      <category term="보안" scheme="https://simhyejin.github.io/categories/CSE/%EB%B3%B4%EC%95%88/"/>
    
    
      <category term="owasp" scheme="https://simhyejin.github.io/tags/owasp/"/>
    
      <category term="security" scheme="https://simhyejin.github.io/tags/security/"/>
    
  </entry>
  
  <entry>
    <title>Hexo+GitHub pages</title>
    <link href="https://simhyejin.github.io/2016/06/20/hexo-github-pages/"/>
    <id>https://simhyejin.github.io/2016/06/20/hexo-github-pages/</id>
    <published>2016-06-20T07:37:00.000Z</published>
    <updated>2019-11-04T08:38:41.490Z</updated>
    
    <content type="html"><![CDATA[<p>이전 포스트 <a href="https://simhyejin.github.io/2016/06/24/hexo-themes/">Hexo 정적 블로그 프레임워크</a>에서 <em>Hexo</em> 설치와 설정을 알아봤습니다.<br>제 블로그는 <em>GitHub Pages</em> 와 <em>Hexo</em> 로 운영하고 있습니다.<br>이번 포스트는 <em>GitHub Pages</em> 으로 사이트 만드는 법과 <em>Hexo_와 _GitHub Pages</em> 연동, <em>ERROR Deployer not found: git</em> 오류에 대해 포스트하겠습니다.</p><hr><h2 id="GitHub-Pages"><a href="#GitHub-Pages" class="headerlink" title="GitHub Pages"></a>GitHub Pages</h2><p><strong>GitHub Pages</strong> 는 GitHub에서 무료로 호스팅하는 공개 웹페이지입니다.<br>GitHub의 저장소에서 개인이나 조직 또는 프로젝트 페이지를 호스팅하도록 설계되어 있습니다.<br>GitHub에서 제공하는 페이지 제작 도구로 쉽게 페이지를 만들어 공개할 수도 있고, 로컬에서 git을 이용해 수동으로 만들 수도 있습니다.</p><p><strong>GitHub Pages</strong> 의 종류는 크게 두가지로 나뉩니다. </p><ul><li>개인 사이트 GitHub Pages</li><li>프로젝트 사이트 GitHub Pages</li></ul><p><strong>개인 사이트</strong>는 <code>&lt;username&gt;.github.io</code>라는 저장소를 만들게되면 자동으로 개인 사이트를 위한 GitHub Pages를 만들 수 있습니다.<br>이 사이트의 저장소 브랜치는 <code>master</code>에서 만들어져야 합니다.</p><p><strong>프로젝트 사이트</strong>는 GitHub에 등록한 프로젝트별로 사이트를 자동으로 만들 수 있습니다.<br>프로젝트 사이트는 <code>&lt;username&gt;.github.io/[프로젝트 저장소 이름]</code>으로 만들어집니다.<br>사이트의 저장소를 위한 브랜치가 <code>gh-pages</code>라는 브랜치이여야 합니다. </p><p>이 블로그는 개인 사이트 Github Pages로 Github 저장소의 이름을 <a href="https://simhyejin.github.io">simhyejin.github.io</a>로 설정하여 만들었습니다. </p><p>GitHub Pages에 대한 자세한 내용은 <a href="https://help.github.com/categories/github-pages-basics/" target="_blank" rel="noopener">GitHub help</a>에서 확인할 수 잇습니다.</p><hr><h2 id="Git-pages에-Hexo-적용"><a href="#Git-pages에-Hexo-적용" class="headerlink" title="Git pages에 Hexo 적용"></a>Git pages에 Hexo 적용</h2><p>먼저 <code>hexo-deployer-git</code>을 설치합니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure><blockquote><p>주의!<br><strong>ERROR</strong> Deployer not found: <strong>git</strong><br><code>hexo-deployer-git</code>을 설치 하지 않으면 deploy시 위와 같은 ERROR가 발생합니다.</p></blockquote><p>그 다음 <code>_config.ym</code> 파일을 열어 <code>#deploymeny</code> 부분을 수정합니다.</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="string">https://github.com/Simhyejin/Simhyejin.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><p><code>repo</code>     : GitHub repository URL<br><code>branch</code>    : 브랜치 이름<br><code>message</code>    : 커밋 내용. 커스터마이징 가능합니다. (<em>Site updated:’YYYY-MM-DD HH:mm:ss’</em> 로 기본 설정되있습니다.)</p><hr><h4 id="Blog-Hexo"><a href="#Blog-Hexo" class="headerlink" title="#Blog #Hexo"></a><a href="https://simhyejin.github.io/tags/blog/">#Blog</a> <a href="https://simhyejin.github.io/tags/hexo/">#Hexo</a></h4><p>&lt; 이전 포스트 <a href="https://simhyejin.github.io/2016/06/24/hexo-themes/">Hexo 정적 블로그 프레임워크</a><br>다음 포스트 &gt; <a href="https://simhyejin.github.io/2016/06/24/hexo-themes/">Hexo 테마 적용하기</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;이전 포스트 &lt;a href=&quot;https://simhyejin.github.io/2016/06/24/hexo-themes/&quot;&gt;Hexo 정적 블로그 프레임워크&lt;/a&gt;에서 &lt;em&gt;Hexo&lt;/em&gt; 설치와 설정을 알아봤습니다.&lt;br&gt;제 블로그는 &lt;em&gt;
      
    
    </summary>
    
      <category term="Blog" scheme="https://simhyejin.github.io/categories/Blog/"/>
    
    
      <category term="hexo" scheme="https://simhyejin.github.io/tags/hexo/"/>
    
      <category term="git" scheme="https://simhyejin.github.io/tags/git/"/>
    
      <category term="github-pages" scheme="https://simhyejin.github.io/tags/github-pages/"/>
    
      <category term="deployer" scheme="https://simhyejin.github.io/tags/deployer/"/>
    
      <category term="ERROR Deployer not found git" scheme="https://simhyejin.github.io/tags/ERROR-Deployer-not-found-git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo 정적 블로그 프레임워크</title>
    <link href="https://simhyejin.github.io/2016/06/20/blog-start-hexo/"/>
    <id>https://simhyejin.github.io/2016/06/20/blog-start-hexo/</id>
    <published>2016-06-20T05:16:39.000Z</published>
    <updated>2019-11-06T07:01:22.122Z</updated>
    
    <content type="html"><![CDATA[<p>블로그 시작을 위해 사용하였던 <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a> 를 소개합니다.</p><hr><div id="index">목차</div><ul><li><a href="#hexo">Hexo</a></li><li><a href="#hexo-install">Hexo 설치</a></li><li><a href="#hexo-command">Hexo 명령어</a></li></ul><hr><h2 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a><div id="hexo">Hexo</div></h2><p><em><strong>Hexo</strong></em> 는 <em>Node.js</em> 기반 정적 블로그 프레임워크 입니다.</p><ul><li><strong>마크다운(Markdown)</strong>을 지원하여 손쉬운 포스트 작성 가능 </li><li><strong>GitHub Pages</strong>를 이용한 호스팅을 지원</li><li>다양한 <strong>테마</strong> 제공</li></ul><p>등 의 장점으로 이 블로그 또한 <em>Hexo</em> 와 <em>GitHub Pages</em> 로 제작되었습니다.<br><strong>Hexo</strong> 설치와 실행법에 대해 소개하겠습니다.</p><hr><h2 id="Hexo-설치"><a href="#Hexo-설치" class="headerlink" title="Hexo 설치"></a><div id="hexo-install">Hexo 설치</div></h2><p><strong><em>Hexo</em></strong> 를 설치 하기 위해서는 <code>Node.js</code>와 <code>Git</code>이 설치 되어 있어야합니다.<br>아래의 링크를 통해 설치가 가능합니다.</p><ul><li><a href="https://nodejs.org/en/" target="_blank" rel="noopener">Node.js</a></li><li><a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a></li></ul><p><em>Node.js</em> 와 <em>Git</em> 이 설치되어 있다면 이제 <strong><em>Hexo</em></strong> 를 설치할 수 있습니다.</p><h3 id="설치"><a href="#설치" class="headerlink" title="설치"></a>설치</h3><p>터미널을 열어 명령어를 통해 <strong><em>Hexo</em></strong>를 설치합니다. </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p><strong><em>Hexo</em></strong> 가 설치 되었다면 아래의 명령어를 통해 <code>Hexo 폴더</code>를 초기 설정합니다.<br>(디렉토리명은 Github repo 이름과 달라도 무관합니다.) </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init &lt;디렉토리명&gt;</span><br><span class="line">$ <span class="built_in">cd</span> &lt;디렉토리명&gt;</span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p>위 과정이 끝나면 폴더안에 아래의 파일이 생성됩니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── _config.yml   : 사이트 설정 파일. 대부분의 설정 할 수 있습니다. </span><br><span class="line">├── package.json  : 응용 프로그램 데이터.  </span><br><span class="line">├── scaffolds   : 새 게시물을 작성하면 Hexo는 scaffolds 폴더에 새로운 파일을 기반으로 하고 있습니다.</span><br><span class="line">├── <span class="built_in">source</span>   : 소스 폴더. 사이트 콘텐츠를 넣어두는 폴더입니다.</span><br><span class="line">|   ├── _drafts </span><br><span class="line">|   └── _posts </span><br><span class="line">└── themes   : 테마 폴더. Hexo는 테마와 콘텐츠를 결합하여 정적 웹 사이트를 생성합니다.</span><br></pre></td></tr></table></figure><h3 id="실행"><a href="#실행" class="headerlink" title="실행"></a>실행</h3><p>모든 설치가 끝났다면 내장 서버를 돌려봅니다.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><code>localhost:4000</code>을 통해 확인합니다.(기본포트 : 4000)</p><hr><h2 id="자주-쓰는-명령어"><a href="#자주-쓰는-명령어" class="headerlink" title="자주 쓰는 명령어"></a><div id="hexo-command">자주 쓰는 명령어</div></h2><h3 id="New-post"><a href="#New-post" class="headerlink" title="New post"></a>New post</h3><p>새로운 포스트 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><h3 id="Generate"><a href="#Generate" class="headerlink" title="Generate"></a>Generate</h3><p>정적 파일 생성</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>Opition으로<br>-d , –deploy : generate가 끝난후 deploy<br>-w , –watch : 파일 변화 확인</p><h3 id="deploy"><a href="#deploy" class="headerlink" title="deploy"></a>deploy</h3><p>원격 사이트에 올리기</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>또는</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>Opition으로<br>-g , –generate : deploy 전에 generate</p><p>그 외에는 Hexo <a href="https://hexo.io/docs/commands.html" target="_blank" rel="noopener">Commands</a>에서 확인 할 수 있습니다.</p><hr><h4 id="Blog-Hexo"><a href="#Blog-Hexo" class="headerlink" title="#Blog #Hexo"></a><a href="https://simhyejin.github.io/tags/blog/">#Blog</a> <a href="https://simhyejin.github.io/tags/hexo/">#Hexo</a></h4><p>다음 포스트 &gt; <a href="https://simhyejin.github.io/2016/06/20/hexo-github-pages/">Hexo+GitHub pages</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;블로그 시작을 위해 사용하였던 &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt; 를 소개합니다.&lt;/p&gt;
&lt;hr&gt;
&lt;div id=&quot;index&quot;&gt;목차&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;
      
    
    </summary>
    
      <category term="Blog" scheme="https://simhyejin.github.io/categories/Blog/"/>
    
    
      <category term="blog" scheme="https://simhyejin.github.io/tags/blog/"/>
    
      <category term="hexo" scheme="https://simhyejin.github.io/tags/hexo/"/>
    
      <category term="정적 블로그 프레임워크" scheme="https://simhyejin.github.io/tags/%EC%A0%95%EC%A0%81-%EB%B8%94%EB%A1%9C%EA%B7%B8-%ED%94%84%EB%A0%88%EC%9E%84%EC%9B%8C%ED%81%AC/"/>
    
      <category term="git" scheme="https://simhyejin.github.io/tags/git/"/>
    
      <category term="Node.js" scheme="https://simhyejin.github.io/tags/Node-js/"/>
    
      <category term="헥소" scheme="https://simhyejin.github.io/tags/%ED%97%A5%EC%86%8C/"/>
    
      <category term="Static Site Generator" scheme="https://simhyejin.github.io/tags/Static-Site-Generator/"/>
    
  </entry>
  
</feed>
